// Code generated by ncraft. DO NOT EDIT.
// Rerunning ncraft will overwrite this file.
// Version: 0.1.0
// Version Date:

package server

import (
	"context"
	"fmt"

	"github.com/etherlabsio/healthcheck/v2"
	"github.com/gorilla/mux"
	"github.com/ncraft-io/ncraft/go/pkg/ncraft/logs"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/rs/cors"
	"google.golang.org/grpc"
	"net"
	"net/http"
	"net/http/pprof"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	nserver "github.com/ncraft-io/ncraft-gokit/pkg/server"

	// Services

	authing "github.com/ncraft-io/armory/service-go/internal/authing-server"
	unitable "github.com/ncraft-io/armory/service-go/internal/unitable-server"
)

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg nserver.Config) {
	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	go InterruptHandler(errc)

	// Debug listener.
	go func() {
		logs.Infow("begin debug server", "transport", "debug", "address", cfg.DebugAddr)

		m := http.NewServeMux()
		m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
		m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
		m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
		m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
		m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

		m.Handle("/metrics", promhttp.Handler())

		m.Handle("/health", healthcheck.Handler(
			// WithTimeout allows you to set a max overall timeout.
			healthcheck.WithTimeout(5*time.Second),
			healthcheck.WithChecker("alive", healthcheck.CheckerFunc(func(ctx context.Context) error {
				conn, err := net.DialTimeout("tcp", cfg.HttpAddr, time.Second)
				if err != nil {
					return err
				}
				return conn.Close()
			})),
		))

		errc <- http.ListenAndServe(cfg.DebugAddr, m)
	}()

	s := grpc.NewServer(grpc.UnaryInterceptor(unaryServerFilter))
	r := mux.NewRouter()

	//register servers.

	authing.RegisterService(cfg, r, s)
	unitable.RegisterService(cfg, r, s)

	// HTTP transport.
	go func() {
		logs.Infow("begin http server", "transport", "HTTP", "address", cfg.HttpAddr)
		h := cors.AllowAll().Handler(r)
		errc <- http.ListenAndServe(cfg.HttpAddr, h)
	}()

	// gRPC transport.
	go func() {
		logs.Infow("begin grpc server", "transport", "gRPC", "address", cfg.GrpcAddr)
		ln, err := net.Listen("tcp", cfg.GrpcAddr)
		if err != nil {
			errc <- err
			return
		}
		errc <- s.Serve(ln)
	}()

	//if watchObj, err := config.WatchFunc(level.ChangeLogLevel, level.LevelPath); err == nil {
	//    defer func() { _ = watchObj.Close() }()
	//} else {
	//    panic(err.Error())
	//}

	// Run!
	logs.Info("unitable.Unified.Server", " started.")
	logs.Info("unitable.Unified.Server", <-errc)
	logs.Info("unitable.Unified.Server", " closed.")
}

func getGrpcPort(addr string) string {
	host := strings.Split(addr, ":")
	if len(host) < 2 {
		panic("host name is invalid (" + addr + ")")
	}
	return host[1]
}

func unaryServerFilter(ctx context.Context,
	req interface{},
	info *grpc.UnaryServerInfo,
	handler grpc.UnaryHandler) (resp interface{}, err error) {
	//if err := middleware.Validate(req); err != nil {
	//	logs.Errorf("validate request failed, err: %s", err)
	//	return nil, core.NewError(http.StatusBadRequest, err.Error())
	//}

	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("panic: %v", r)
		}
	}()

	resp, err = handler(ctx, req)
	if err != nil {
		return resp, err
	}

	//var validatorCfg middleware.ValidatorConfig
	//_ = config.ScanKey("validator", &validatorCfg)
	//if !validatorCfg.CheckResponse {
	//	return
	//}
	//if err = middleware.Validate(resp); err != nil {
	//	logs.Errorf("validate response failed, err: %s", err)
	//	return nil, core.NewError(http.StatusInternalServerError, err.Error())
	//}
	return
}

func InterruptHandler(errc chan<- error) {
	c := make(chan os.Signal, 1)
	signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
	terminateError := fmt.Errorf("%s", <-c)

	// Place whatever shutdown handling you want here

	errc <- terminateError
}
