// Code generated by ncraft. DO NOT EDIT.
// Rerunning ncraft will overwrite this file.
// Version: 0.1.0
// Version Date:

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"

	"github.com/mojo-lang/core/go/pkg/mojo/core"
	"github.com/ncraft-io/armory/go/pkg/armory/unitable"

	// this service api
	pb "github.com/ncraft-io/armory/go/pkg/armory/unitable/v1"
)

var (
	_ = unitable.Table{}
	_ = core.Null{}
	_ = core.Ordering{}
	_ = core.FieldMask{}
	_ = unitable.Column{}
	_ = core.Object{}
)

// MakeGRPCServer makes a set of endpoints available as a gRPC UnitableServer.
func MakeGRPCServer(endpoints Endpoints, tracer stdopentracing.Tracer, logger log.Logger) pb.UnitableServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
		grpctransport.ServerErrorLogger(logger),
	}

	addTracerOption := func(methodName string) []grpctransport.ServerOption {
		if tracer != nil {
			return append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, methodName, logger)))
		}
		return serverOptions
	}

	return &grpcServer{
		// Unitable

		createTable: grpctransport.NewServer(
			endpoints.CreateTableEndpoint,
			DecodeGRPCCreateTableRequest,
			EncodeGRPCCreateTableResponse,
			addTracerOption("create_table")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "create_table", logger)))...,
		),
		updateTable: grpctransport.NewServer(
			endpoints.UpdateTableEndpoint,
			DecodeGRPCUpdateTableRequest,
			EncodeGRPCUpdateTableResponse,
			addTracerOption("update_table")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "update_table", logger)))...,
		),
		getTable: grpctransport.NewServer(
			endpoints.GetTableEndpoint,
			DecodeGRPCGetTableRequest,
			EncodeGRPCGetTableResponse,
			addTracerOption("get_table")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "get_table", logger)))...,
		),
		listTables: grpctransport.NewServer(
			endpoints.ListTablesEndpoint,
			DecodeGRPCListTablesRequest,
			EncodeGRPCListTablesResponse,
			addTracerOption("list_tables")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "list_tables", logger)))...,
		),
		deleteTable: grpctransport.NewServer(
			endpoints.DeleteTableEndpoint,
			DecodeGRPCDeleteTableRequest,
			EncodeGRPCDeleteTableResponse,
			addTracerOption("delete_table")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "delete_table", logger)))...,
		),
		syncTable: grpctransport.NewServer(
			endpoints.SyncTableEndpoint,
			DecodeGRPCSyncTableRequest,
			EncodeGRPCSyncTableResponse,
			addTracerOption("sync_table")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "sync_table", logger)))...,
		),
		createColumn: grpctransport.NewServer(
			endpoints.CreateColumnEndpoint,
			DecodeGRPCCreateColumnRequest,
			EncodeGRPCCreateColumnResponse,
			addTracerOption("create_column")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "create_column", logger)))...,
		),
		updateColumn: grpctransport.NewServer(
			endpoints.UpdateColumnEndpoint,
			DecodeGRPCUpdateColumnRequest,
			EncodeGRPCUpdateColumnResponse,
			addTracerOption("update_column")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "update_column", logger)))...,
		),
		getColumn: grpctransport.NewServer(
			endpoints.GetColumnEndpoint,
			DecodeGRPCGetColumnRequest,
			EncodeGRPCGetColumnResponse,
			addTracerOption("get_column")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "get_column", logger)))...,
		),
		deleteColumn: grpctransport.NewServer(
			endpoints.DeleteColumnEndpoint,
			DecodeGRPCDeleteColumnRequest,
			EncodeGRPCDeleteColumnResponse,
			addTracerOption("delete_column")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "delete_column", logger)))...,
		),
		listColumns: grpctransport.NewServer(
			endpoints.ListColumnsEndpoint,
			DecodeGRPCListColumnsRequest,
			EncodeGRPCListColumnsResponse,
			addTracerOption("list_columns")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "list_columns", logger)))...,
		),
		batchCreateColumns: grpctransport.NewServer(
			endpoints.BatchCreateColumnsEndpoint,
			DecodeGRPCBatchCreateColumnsRequest,
			EncodeGRPCBatchCreateColumnsResponse,
			addTracerOption("batch_create_columns")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "batch_create_columns", logger)))...,
		),
		batchUpdateColumn: grpctransport.NewServer(
			endpoints.BatchUpdateColumnEndpoint,
			DecodeGRPCBatchUpdateColumnRequest,
			EncodeGRPCBatchUpdateColumnResponse,
			addTracerOption("batch_update_column")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "batch_update_column", logger)))...,
		),
		batchDeleteColumn: grpctransport.NewServer(
			endpoints.BatchDeleteColumnEndpoint,
			DecodeGRPCBatchDeleteColumnRequest,
			EncodeGRPCBatchDeleteColumnResponse,
			addTracerOption("batch_delete_column")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "batch_delete_column", logger)))...,
		),
		createRow: grpctransport.NewServer(
			endpoints.CreateRowEndpoint,
			DecodeGRPCCreateRowRequest,
			EncodeGRPCCreateRowResponse,
			addTracerOption("create_row")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "create_row", logger)))...,
		),
		updateRow: grpctransport.NewServer(
			endpoints.UpdateRowEndpoint,
			DecodeGRPCUpdateRowRequest,
			EncodeGRPCUpdateRowResponse,
			addTracerOption("update_row")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "update_row", logger)))...,
		),
		getRow: grpctransport.NewServer(
			endpoints.GetRowEndpoint,
			DecodeGRPCGetRowRequest,
			EncodeGRPCGetRowResponse,
			addTracerOption("get_row")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "get_row", logger)))...,
		),
		deleteRow: grpctransport.NewServer(
			endpoints.DeleteRowEndpoint,
			DecodeGRPCDeleteRowRequest,
			EncodeGRPCDeleteRowResponse,
			addTracerOption("delete_row")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "delete_row", logger)))...,
		),
		listRow: grpctransport.NewServer(
			endpoints.ListRowEndpoint,
			DecodeGRPCListRowRequest,
			EncodeGRPCListRowResponse,
			addTracerOption("list_row")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "list_row", logger)))...,
		),
		exportRow: grpctransport.NewServer(
			endpoints.ExportRowEndpoint,
			DecodeGRPCExportRowRequest,
			EncodeGRPCExportRowResponse,
			addTracerOption("export_row")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "export_row", logger)))...,
		),
		batchCreateRows: grpctransport.NewServer(
			endpoints.BatchCreateRowsEndpoint,
			DecodeGRPCBatchCreateRowsRequest,
			EncodeGRPCBatchCreateRowsResponse,
			addTracerOption("batch_create_rows")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "batch_create_rows", logger)))...,
		),
		batchUpdateRows: grpctransport.NewServer(
			endpoints.BatchUpdateRowsEndpoint,
			DecodeGRPCBatchUpdateRowsRequest,
			EncodeGRPCBatchUpdateRowsResponse,
			addTracerOption("batch_update_rows")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "batch_update_rows", logger)))...,
		),
		batchDeleteRows: grpctransport.NewServer(
			endpoints.BatchDeleteRowsEndpoint,
			DecodeGRPCBatchDeleteRowsRequest,
			EncodeGRPCBatchDeleteRowsResponse,
			addTracerOption("batch_delete_rows")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "batch_delete_rows", logger)))...,
		),
	}
}

// grpcServer implements the UnitableServer interface
type grpcServer struct {
	pb.UnimplementedUnitableServer

	createTable        grpctransport.Handler
	updateTable        grpctransport.Handler
	getTable           grpctransport.Handler
	listTables         grpctransport.Handler
	deleteTable        grpctransport.Handler
	syncTable          grpctransport.Handler
	createColumn       grpctransport.Handler
	updateColumn       grpctransport.Handler
	getColumn          grpctransport.Handler
	deleteColumn       grpctransport.Handler
	listColumns        grpctransport.Handler
	batchCreateColumns grpctransport.Handler
	batchUpdateColumn  grpctransport.Handler
	batchDeleteColumn  grpctransport.Handler
	createRow          grpctransport.Handler
	updateRow          grpctransport.Handler
	getRow             grpctransport.Handler
	deleteRow          grpctransport.Handler
	listRow            grpctransport.Handler
	exportRow          grpctransport.Handler
	batchCreateRows    grpctransport.Handler
	batchUpdateRows    grpctransport.Handler
	batchDeleteRows    grpctransport.Handler
}

// Methods for grpcServer to implement UnitableServer interface

func (s *grpcServer) CreateTable(ctx context.Context, req *pb.CreateTableRequest) (*unitable.Table, error) {
	_, rep, err := s.createTable.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*unitable.Table), nil
}

func (s *grpcServer) UpdateTable(ctx context.Context, req *pb.UpdateTableRequest) (*core.Null, error) {
	_, rep, err := s.updateTable.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) GetTable(ctx context.Context, req *pb.GetTableRequest) (*unitable.Table, error) {
	_, rep, err := s.getTable.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*unitable.Table), nil
}

func (s *grpcServer) ListTables(ctx context.Context, req *pb.ListTablesRequest) (*pb.ListTablesResponse, error) {
	_, rep, err := s.listTables.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ListTablesResponse), nil
}

func (s *grpcServer) DeleteTable(ctx context.Context, req *pb.DeleteTableRequest) (*core.Null, error) {
	_, rep, err := s.deleteTable.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) SyncTable(ctx context.Context, req *pb.SyncTableRequest) (*unitable.Table, error) {
	_, rep, err := s.syncTable.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*unitable.Table), nil
}

func (s *grpcServer) CreateColumn(ctx context.Context, req *pb.CreateColumnRequest) (*unitable.Column, error) {
	_, rep, err := s.createColumn.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*unitable.Column), nil
}

func (s *grpcServer) UpdateColumn(ctx context.Context, req *pb.UpdateColumnRequest) (*core.Null, error) {
	_, rep, err := s.updateColumn.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) GetColumn(ctx context.Context, req *pb.GetColumnRequest) (*unitable.Column, error) {
	_, rep, err := s.getColumn.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*unitable.Column), nil
}

func (s *grpcServer) DeleteColumn(ctx context.Context, req *pb.DeleteColumnRequest) (*core.Null, error) {
	_, rep, err := s.deleteColumn.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) ListColumns(ctx context.Context, req *pb.ListColumnsRequest) (*pb.ListColumnsResponse, error) {
	_, rep, err := s.listColumns.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ListColumnsResponse), nil
}

func (s *grpcServer) BatchCreateColumns(ctx context.Context, req *pb.BatchCreateColumnsRequest) (*core.Null, error) {
	_, rep, err := s.batchCreateColumns.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) BatchUpdateColumn(ctx context.Context, req *pb.BatchUpdateColumnRequest) (*core.Null, error) {
	_, rep, err := s.batchUpdateColumn.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) BatchDeleteColumn(ctx context.Context, req *pb.BatchDeleteColumnRequest) (*core.Null, error) {
	_, rep, err := s.batchDeleteColumn.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) CreateRow(ctx context.Context, req *pb.CreateRowRequest) (*core.Object, error) {
	_, rep, err := s.createRow.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Object), nil
}

func (s *grpcServer) UpdateRow(ctx context.Context, req *pb.UpdateRowRequest) (*core.Null, error) {
	_, rep, err := s.updateRow.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) GetRow(ctx context.Context, req *pb.GetRowRequest) (*core.Object, error) {
	_, rep, err := s.getRow.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Object), nil
}

func (s *grpcServer) DeleteRow(ctx context.Context, req *pb.DeleteRowRequest) (*core.Null, error) {
	_, rep, err := s.deleteRow.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) ListRow(ctx context.Context, req *pb.ListRowRequest) (*pb.ListRowResponse, error) {
	_, rep, err := s.listRow.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ListRowResponse), nil
}

func (s *grpcServer) ExportRow(ctx context.Context, req *pb.ExportRowRequest) (*pb.ExportRowResponse, error) {
	_, rep, err := s.exportRow.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ExportRowResponse), nil
}

func (s *grpcServer) BatchCreateRows(ctx context.Context, req *pb.BatchCreateRowsRequest) (*core.Null, error) {
	_, rep, err := s.batchCreateRows.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) BatchUpdateRows(ctx context.Context, req *pb.BatchUpdateRowsRequest) (*core.Null, error) {
	_, rep, err := s.batchUpdateRows.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

func (s *grpcServer) BatchDeleteRows(ctx context.Context, req *pb.BatchDeleteRowsRequest) (*core.Null, error) {
	_, rep, err := s.batchDeleteRows.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

// Server Decode

// DecodeGRPCCreateTableRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC CreateTable request to a user-domain CreateTable request. Primarily useful in a server.
func DecodeGRPCCreateTableRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateTableRequest)
	return req, nil
}

// DecodeGRPCUpdateTableRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC UpdateTable request to a user-domain UpdateTable request. Primarily useful in a server.
func DecodeGRPCUpdateTableRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UpdateTableRequest)
	return req, nil
}

// DecodeGRPCGetTableRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC GetTable request to a user-domain GetTable request. Primarily useful in a server.
func DecodeGRPCGetTableRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetTableRequest)
	return req, nil
}

// DecodeGRPCListTablesRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC ListTables request to a user-domain ListTables request. Primarily useful in a server.
func DecodeGRPCListTablesRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ListTablesRequest)
	return req, nil
}

// DecodeGRPCDeleteTableRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC DeleteTable request to a user-domain DeleteTable request. Primarily useful in a server.
func DecodeGRPCDeleteTableRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.DeleteTableRequest)
	return req, nil
}

// DecodeGRPCSyncTableRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC SyncTable request to a user-domain SyncTable request. Primarily useful in a server.
func DecodeGRPCSyncTableRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.SyncTableRequest)
	return req, nil
}

// DecodeGRPCCreateColumnRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC CreateColumn request to a user-domain CreateColumn request. Primarily useful in a server.
func DecodeGRPCCreateColumnRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateColumnRequest)
	return req, nil
}

// DecodeGRPCUpdateColumnRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC UpdateColumn request to a user-domain UpdateColumn request. Primarily useful in a server.
func DecodeGRPCUpdateColumnRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UpdateColumnRequest)
	return req, nil
}

// DecodeGRPCGetColumnRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC GetColumn request to a user-domain GetColumn request. Primarily useful in a server.
func DecodeGRPCGetColumnRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetColumnRequest)
	return req, nil
}

// DecodeGRPCDeleteColumnRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC DeleteColumn request to a user-domain DeleteColumn request. Primarily useful in a server.
func DecodeGRPCDeleteColumnRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.DeleteColumnRequest)
	return req, nil
}

// DecodeGRPCListColumnsRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC ListColumns request to a user-domain ListColumns request. Primarily useful in a server.
func DecodeGRPCListColumnsRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ListColumnsRequest)
	return req, nil
}

// DecodeGRPCBatchCreateColumnsRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC BatchCreateColumns request to a user-domain BatchCreateColumns request. Primarily useful in a server.
func DecodeGRPCBatchCreateColumnsRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.BatchCreateColumnsRequest)
	return req, nil
}

// DecodeGRPCBatchUpdateColumnRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC BatchUpdateColumn request to a user-domain BatchUpdateColumn request. Primarily useful in a server.
func DecodeGRPCBatchUpdateColumnRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.BatchUpdateColumnRequest)
	return req, nil
}

// DecodeGRPCBatchDeleteColumnRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC BatchDeleteColumn request to a user-domain BatchDeleteColumn request. Primarily useful in a server.
func DecodeGRPCBatchDeleteColumnRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.BatchDeleteColumnRequest)
	return req, nil
}

// DecodeGRPCCreateRowRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC CreateRow request to a user-domain CreateRow request. Primarily useful in a server.
func DecodeGRPCCreateRowRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateRowRequest)
	return req, nil
}

// DecodeGRPCUpdateRowRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC UpdateRow request to a user-domain UpdateRow request. Primarily useful in a server.
func DecodeGRPCUpdateRowRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UpdateRowRequest)
	return req, nil
}

// DecodeGRPCGetRowRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC GetRow request to a user-domain GetRow request. Primarily useful in a server.
func DecodeGRPCGetRowRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetRowRequest)
	return req, nil
}

// DecodeGRPCDeleteRowRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC DeleteRow request to a user-domain DeleteRow request. Primarily useful in a server.
func DecodeGRPCDeleteRowRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.DeleteRowRequest)
	return req, nil
}

// DecodeGRPCListRowRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC ListRow request to a user-domain ListRow request. Primarily useful in a server.
func DecodeGRPCListRowRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ListRowRequest)
	return req, nil
}

// DecodeGRPCExportRowRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC ExportRow request to a user-domain ExportRow request. Primarily useful in a server.
func DecodeGRPCExportRowRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ExportRowRequest)
	return req, nil
}

// DecodeGRPCBatchCreateRowsRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC BatchCreateRows request to a user-domain BatchCreateRows request. Primarily useful in a server.
func DecodeGRPCBatchCreateRowsRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.BatchCreateRowsRequest)
	return req, nil
}

// DecodeGRPCBatchUpdateRowsRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC BatchUpdateRows request to a user-domain BatchUpdateRows request. Primarily useful in a server.
func DecodeGRPCBatchUpdateRowsRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.BatchUpdateRowsRequest)
	return req, nil
}

// DecodeGRPCBatchDeleteRowsRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC BatchDeleteRows request to a user-domain BatchDeleteRows request. Primarily useful in a server.
func DecodeGRPCBatchDeleteRowsRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.BatchDeleteRowsRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCCreateTableResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain CreateTable response to a gRPC CreateTable reply. Primarily useful in a server.
func EncodeGRPCCreateTableResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*unitable.Table)
	return resp, nil
}

// EncodeGRPCUpdateTableResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain UpdateTable response to a gRPC UpdateTable reply. Primarily useful in a server.
func EncodeGRPCUpdateTableResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCGetTableResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain GetTable response to a gRPC GetTable reply. Primarily useful in a server.
func EncodeGRPCGetTableResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*unitable.Table)
	return resp, nil
}

// EncodeGRPCListTablesResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain ListTables response to a gRPC ListTables reply. Primarily useful in a server.
func EncodeGRPCListTablesResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ListTablesResponse)
	return resp, nil
}

// EncodeGRPCDeleteTableResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain DeleteTable response to a gRPC DeleteTable reply. Primarily useful in a server.
func EncodeGRPCDeleteTableResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCSyncTableResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain SyncTable response to a gRPC SyncTable reply. Primarily useful in a server.
func EncodeGRPCSyncTableResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*unitable.Table)
	return resp, nil
}

// EncodeGRPCCreateColumnResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain CreateColumn response to a gRPC CreateColumn reply. Primarily useful in a server.
func EncodeGRPCCreateColumnResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*unitable.Column)
	return resp, nil
}

// EncodeGRPCUpdateColumnResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain UpdateColumn response to a gRPC UpdateColumn reply. Primarily useful in a server.
func EncodeGRPCUpdateColumnResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCGetColumnResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain GetColumn response to a gRPC GetColumn reply. Primarily useful in a server.
func EncodeGRPCGetColumnResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*unitable.Column)
	return resp, nil
}

// EncodeGRPCDeleteColumnResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain DeleteColumn response to a gRPC DeleteColumn reply. Primarily useful in a server.
func EncodeGRPCDeleteColumnResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCListColumnsResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain ListColumns response to a gRPC ListColumns reply. Primarily useful in a server.
func EncodeGRPCListColumnsResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ListColumnsResponse)
	return resp, nil
}

// EncodeGRPCBatchCreateColumnsResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain BatchCreateColumns response to a gRPC BatchCreateColumns reply. Primarily useful in a server.
func EncodeGRPCBatchCreateColumnsResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCBatchUpdateColumnResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain BatchUpdateColumn response to a gRPC BatchUpdateColumn reply. Primarily useful in a server.
func EncodeGRPCBatchUpdateColumnResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCBatchDeleteColumnResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain BatchDeleteColumn response to a gRPC BatchDeleteColumn reply. Primarily useful in a server.
func EncodeGRPCBatchDeleteColumnResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCCreateRowResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain CreateRow response to a gRPC CreateRow reply. Primarily useful in a server.
func EncodeGRPCCreateRowResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Object)
	return resp, nil
}

// EncodeGRPCUpdateRowResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain UpdateRow response to a gRPC UpdateRow reply. Primarily useful in a server.
func EncodeGRPCUpdateRowResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCGetRowResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain GetRow response to a gRPC GetRow reply. Primarily useful in a server.
func EncodeGRPCGetRowResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Object)
	return resp, nil
}

// EncodeGRPCDeleteRowResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain DeleteRow response to a gRPC DeleteRow reply. Primarily useful in a server.
func EncodeGRPCDeleteRowResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCListRowResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain ListRow response to a gRPC ListRow reply. Primarily useful in a server.
func EncodeGRPCListRowResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ListRowResponse)
	return resp, nil
}

// EncodeGRPCExportRowResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain ExportRow response to a gRPC ExportRow reply. Primarily useful in a server.
func EncodeGRPCExportRowResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ExportRowResponse)
	return resp, nil
}

// EncodeGRPCBatchCreateRowsResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain BatchCreateRows response to a gRPC BatchCreateRows reply. Primarily useful in a server.
func EncodeGRPCBatchCreateRowsResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCBatchUpdateRowsResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain BatchUpdateRows response to a gRPC BatchUpdateRows reply. Primarily useful in a server.
func EncodeGRPCBatchUpdateRowsResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// EncodeGRPCBatchDeleteRowsResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain BatchDeleteRows response to a gRPC BatchDeleteRows reply. Primarily useful in a server.
func EncodeGRPCBatchDeleteRowsResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
