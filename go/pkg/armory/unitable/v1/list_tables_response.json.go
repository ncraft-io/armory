// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.

package unitable

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

func init() {
	core.RegisterJSONTypeDecoder("unitable.ListTablesResponse", &ListTablesResponseCodec{})
	core.RegisterJSONTypeEncoder("unitable.ListTablesResponse", &ListTablesResponseCodec{})
}

type ListTablesResponseCodec struct {
}

func (codec *ListTablesResponseCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	any := iter.ReadAny()
	listTablesResponse := (*ListTablesResponse)(ptr)
	if any.ValueType() == jsoniter.ArrayValue {
		any.ToVal(&listTablesResponse.Tables)
	}
}

func (codec *ListTablesResponseCodec) IsEmpty(ptr unsafe.Pointer) bool {
	listTablesResponse := (*ListTablesResponse)(ptr)
	return listTablesResponse == nil || len(listTablesResponse.Tables) == 0
}

func (codec *ListTablesResponseCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	listTablesResponse := (*ListTablesResponse)(ptr)
	if len(listTablesResponse.Tables) > 0 {
		stream.WriteVal(listTablesResponse.Tables)
	}
}
