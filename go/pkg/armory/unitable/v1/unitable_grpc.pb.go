// Code generated by mojo. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: armory/unitable/v1/unitable.proto

package unitable

import (
	context "context"
	core "github.com/mojo-lang/core/go/pkg/mojo/core"
	unitable "github.com/ncraft-io/armory/go/pkg/armory/unitable"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Unitable_CreateTable_FullMethodName        = "/armory.unitable.v1.Unitable/create_table"
	Unitable_UpdateTable_FullMethodName        = "/armory.unitable.v1.Unitable/update_table"
	Unitable_GetTable_FullMethodName           = "/armory.unitable.v1.Unitable/get_table"
	Unitable_ListTables_FullMethodName         = "/armory.unitable.v1.Unitable/list_tables"
	Unitable_DeleteTable_FullMethodName        = "/armory.unitable.v1.Unitable/delete_table"
	Unitable_SyncTable_FullMethodName          = "/armory.unitable.v1.Unitable/sync_table"
	Unitable_CreateColumn_FullMethodName       = "/armory.unitable.v1.Unitable/create_column"
	Unitable_UpdateColumn_FullMethodName       = "/armory.unitable.v1.Unitable/update_column"
	Unitable_GetColumn_FullMethodName          = "/armory.unitable.v1.Unitable/get_column"
	Unitable_DeleteColumn_FullMethodName       = "/armory.unitable.v1.Unitable/delete_column"
	Unitable_ListColumns_FullMethodName        = "/armory.unitable.v1.Unitable/list_columns"
	Unitable_BatchCreateColumns_FullMethodName = "/armory.unitable.v1.Unitable/batch_create_columns"
	Unitable_BatchUpdateColumn_FullMethodName  = "/armory.unitable.v1.Unitable/batch_update_column"
	Unitable_BatchDeleteColumn_FullMethodName  = "/armory.unitable.v1.Unitable/batch_delete_column"
	Unitable_CreateRow_FullMethodName          = "/armory.unitable.v1.Unitable/create_row"
	Unitable_UpdateRow_FullMethodName          = "/armory.unitable.v1.Unitable/update_row"
	Unitable_GetRow_FullMethodName             = "/armory.unitable.v1.Unitable/get_row"
	Unitable_DeleteRow_FullMethodName          = "/armory.unitable.v1.Unitable/delete_row"
	Unitable_ListRow_FullMethodName            = "/armory.unitable.v1.Unitable/list_row"
	Unitable_ExportRow_FullMethodName          = "/armory.unitable.v1.Unitable/export_row"
	Unitable_BatchCreateRows_FullMethodName    = "/armory.unitable.v1.Unitable/batch_create_rows"
	Unitable_BatchUpdateRows_FullMethodName    = "/armory.unitable.v1.Unitable/batch_update_rows"
	Unitable_BatchDeleteRows_FullMethodName    = "/armory.unitable.v1.Unitable/batch_delete_rows"
)

// UnitableClient is the client API for Unitable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnitableClient interface {
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*unitable.Table, error)
	UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*core.Null, error)
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*unitable.Table, error)
	ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error)
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*core.Null, error)
	SyncTable(ctx context.Context, in *SyncTableRequest, opts ...grpc.CallOption) (*unitable.Table, error)
	CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*unitable.Column, error)
	UpdateColumn(ctx context.Context, in *UpdateColumnRequest, opts ...grpc.CallOption) (*core.Null, error)
	GetColumn(ctx context.Context, in *GetColumnRequest, opts ...grpc.CallOption) (*unitable.Column, error)
	DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...grpc.CallOption) (*core.Null, error)
	ListColumns(ctx context.Context, in *ListColumnsRequest, opts ...grpc.CallOption) (*ListColumnsResponse, error)
	BatchCreateColumns(ctx context.Context, in *BatchCreateColumnsRequest, opts ...grpc.CallOption) (*core.Null, error)
	BatchUpdateColumn(ctx context.Context, in *BatchUpdateColumnRequest, opts ...grpc.CallOption) (*core.Null, error)
	BatchDeleteColumn(ctx context.Context, in *BatchDeleteColumnRequest, opts ...grpc.CallOption) (*core.Null, error)
	CreateRow(ctx context.Context, in *CreateRowRequest, opts ...grpc.CallOption) (*core.Object, error)
	UpdateRow(ctx context.Context, in *UpdateRowRequest, opts ...grpc.CallOption) (*core.Null, error)
	GetRow(ctx context.Context, in *GetRowRequest, opts ...grpc.CallOption) (*core.Object, error)
	DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...grpc.CallOption) (*core.Null, error)
	ListRow(ctx context.Context, in *ListRowRequest, opts ...grpc.CallOption) (*ListRowResponse, error)
	ExportRow(ctx context.Context, in *ExportRowRequest, opts ...grpc.CallOption) (*ExportRowResponse, error)
	BatchCreateRows(ctx context.Context, in *BatchCreateRowsRequest, opts ...grpc.CallOption) (*core.Null, error)
	BatchUpdateRows(ctx context.Context, in *BatchUpdateRowsRequest, opts ...grpc.CallOption) (*core.Null, error)
	BatchDeleteRows(ctx context.Context, in *BatchDeleteRowsRequest, opts ...grpc.CallOption) (*core.Null, error)
}

type unitableClient struct {
	cc grpc.ClientConnInterface
}

func NewUnitableClient(cc grpc.ClientConnInterface) UnitableClient {
	return &unitableClient{cc}
}

func (c *unitableClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*unitable.Table, error) {
	out := new(unitable.Table)
	err := c.cc.Invoke(ctx, Unitable_CreateTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_UpdateTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*unitable.Table, error) {
	out := new(unitable.Table)
	err := c.cc.Invoke(ctx, Unitable_GetTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error) {
	out := new(ListTablesResponse)
	err := c.cc.Invoke(ctx, Unitable_ListTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_DeleteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) SyncTable(ctx context.Context, in *SyncTableRequest, opts ...grpc.CallOption) (*unitable.Table, error) {
	out := new(unitable.Table)
	err := c.cc.Invoke(ctx, Unitable_SyncTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*unitable.Column, error) {
	out := new(unitable.Column)
	err := c.cc.Invoke(ctx, Unitable_CreateColumn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) UpdateColumn(ctx context.Context, in *UpdateColumnRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_UpdateColumn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) GetColumn(ctx context.Context, in *GetColumnRequest, opts ...grpc.CallOption) (*unitable.Column, error) {
	out := new(unitable.Column)
	err := c.cc.Invoke(ctx, Unitable_GetColumn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_DeleteColumn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) ListColumns(ctx context.Context, in *ListColumnsRequest, opts ...grpc.CallOption) (*ListColumnsResponse, error) {
	out := new(ListColumnsResponse)
	err := c.cc.Invoke(ctx, Unitable_ListColumns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) BatchCreateColumns(ctx context.Context, in *BatchCreateColumnsRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_BatchCreateColumns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) BatchUpdateColumn(ctx context.Context, in *BatchUpdateColumnRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_BatchUpdateColumn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) BatchDeleteColumn(ctx context.Context, in *BatchDeleteColumnRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_BatchDeleteColumn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) CreateRow(ctx context.Context, in *CreateRowRequest, opts ...grpc.CallOption) (*core.Object, error) {
	out := new(core.Object)
	err := c.cc.Invoke(ctx, Unitable_CreateRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) UpdateRow(ctx context.Context, in *UpdateRowRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_UpdateRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) GetRow(ctx context.Context, in *GetRowRequest, opts ...grpc.CallOption) (*core.Object, error) {
	out := new(core.Object)
	err := c.cc.Invoke(ctx, Unitable_GetRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_DeleteRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) ListRow(ctx context.Context, in *ListRowRequest, opts ...grpc.CallOption) (*ListRowResponse, error) {
	out := new(ListRowResponse)
	err := c.cc.Invoke(ctx, Unitable_ListRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) ExportRow(ctx context.Context, in *ExportRowRequest, opts ...grpc.CallOption) (*ExportRowResponse, error) {
	out := new(ExportRowResponse)
	err := c.cc.Invoke(ctx, Unitable_ExportRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) BatchCreateRows(ctx context.Context, in *BatchCreateRowsRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_BatchCreateRows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) BatchUpdateRows(ctx context.Context, in *BatchUpdateRowsRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_BatchUpdateRows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitableClient) BatchDeleteRows(ctx context.Context, in *BatchDeleteRowsRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, Unitable_BatchDeleteRows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnitableServer is the server API for Unitable service.
// All implementations must embed UnimplementedUnitableServer
// for forward compatibility
type UnitableServer interface {
	CreateTable(context.Context, *CreateTableRequest) (*unitable.Table, error)
	UpdateTable(context.Context, *UpdateTableRequest) (*core.Null, error)
	GetTable(context.Context, *GetTableRequest) (*unitable.Table, error)
	ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error)
	DeleteTable(context.Context, *DeleteTableRequest) (*core.Null, error)
	SyncTable(context.Context, *SyncTableRequest) (*unitable.Table, error)
	CreateColumn(context.Context, *CreateColumnRequest) (*unitable.Column, error)
	UpdateColumn(context.Context, *UpdateColumnRequest) (*core.Null, error)
	GetColumn(context.Context, *GetColumnRequest) (*unitable.Column, error)
	DeleteColumn(context.Context, *DeleteColumnRequest) (*core.Null, error)
	ListColumns(context.Context, *ListColumnsRequest) (*ListColumnsResponse, error)
	BatchCreateColumns(context.Context, *BatchCreateColumnsRequest) (*core.Null, error)
	BatchUpdateColumn(context.Context, *BatchUpdateColumnRequest) (*core.Null, error)
	BatchDeleteColumn(context.Context, *BatchDeleteColumnRequest) (*core.Null, error)
	CreateRow(context.Context, *CreateRowRequest) (*core.Object, error)
	UpdateRow(context.Context, *UpdateRowRequest) (*core.Null, error)
	GetRow(context.Context, *GetRowRequest) (*core.Object, error)
	DeleteRow(context.Context, *DeleteRowRequest) (*core.Null, error)
	ListRow(context.Context, *ListRowRequest) (*ListRowResponse, error)
	ExportRow(context.Context, *ExportRowRequest) (*ExportRowResponse, error)
	BatchCreateRows(context.Context, *BatchCreateRowsRequest) (*core.Null, error)
	BatchUpdateRows(context.Context, *BatchUpdateRowsRequest) (*core.Null, error)
	BatchDeleteRows(context.Context, *BatchDeleteRowsRequest) (*core.Null, error)
	mustEmbedUnimplementedUnitableServer()
}

// UnimplementedUnitableServer must be embedded to have forward compatible implementations.
type UnimplementedUnitableServer struct {
}

func (UnimplementedUnitableServer) CreateTable(context.Context, *CreateTableRequest) (*unitable.Table, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedUnitableServer) UpdateTable(context.Context, *UpdateTableRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTable not implemented")
}
func (UnimplementedUnitableServer) GetTable(context.Context, *GetTableRequest) (*unitable.Table, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedUnitableServer) ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedUnitableServer) DeleteTable(context.Context, *DeleteTableRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedUnitableServer) SyncTable(context.Context, *SyncTableRequest) (*unitable.Table, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTable not implemented")
}
func (UnimplementedUnitableServer) CreateColumn(context.Context, *CreateColumnRequest) (*unitable.Column, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumn not implemented")
}
func (UnimplementedUnitableServer) UpdateColumn(context.Context, *UpdateColumnRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateColumn not implemented")
}
func (UnimplementedUnitableServer) GetColumn(context.Context, *GetColumnRequest) (*unitable.Column, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumn not implemented")
}
func (UnimplementedUnitableServer) DeleteColumn(context.Context, *DeleteColumnRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColumn not implemented")
}
func (UnimplementedUnitableServer) ListColumns(context.Context, *ListColumnsRequest) (*ListColumnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListColumns not implemented")
}
func (UnimplementedUnitableServer) BatchCreateColumns(context.Context, *BatchCreateColumnsRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateColumns not implemented")
}
func (UnimplementedUnitableServer) BatchUpdateColumn(context.Context, *BatchUpdateColumnRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateColumn not implemented")
}
func (UnimplementedUnitableServer) BatchDeleteColumn(context.Context, *BatchDeleteColumnRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteColumn not implemented")
}
func (UnimplementedUnitableServer) CreateRow(context.Context, *CreateRowRequest) (*core.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRow not implemented")
}
func (UnimplementedUnitableServer) UpdateRow(context.Context, *UpdateRowRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRow not implemented")
}
func (UnimplementedUnitableServer) GetRow(context.Context, *GetRowRequest) (*core.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRow not implemented")
}
func (UnimplementedUnitableServer) DeleteRow(context.Context, *DeleteRowRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRow not implemented")
}
func (UnimplementedUnitableServer) ListRow(context.Context, *ListRowRequest) (*ListRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRow not implemented")
}
func (UnimplementedUnitableServer) ExportRow(context.Context, *ExportRowRequest) (*ExportRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportRow not implemented")
}
func (UnimplementedUnitableServer) BatchCreateRows(context.Context, *BatchCreateRowsRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateRows not implemented")
}
func (UnimplementedUnitableServer) BatchUpdateRows(context.Context, *BatchUpdateRowsRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateRows not implemented")
}
func (UnimplementedUnitableServer) BatchDeleteRows(context.Context, *BatchDeleteRowsRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteRows not implemented")
}
func (UnimplementedUnitableServer) mustEmbedUnimplementedUnitableServer() {}

// UnsafeUnitableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnitableServer will
// result in compilation errors.
type UnsafeUnitableServer interface {
	mustEmbedUnimplementedUnitableServer()
}

func RegisterUnitableServer(s grpc.ServiceRegistrar, srv UnitableServer) {
	s.RegisterService(&Unitable_ServiceDesc, srv)
}

func _Unitable_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_CreateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_UpdateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).UpdateTable(ctx, req.(*UpdateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_GetTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_ListTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).ListTables(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_DeleteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_SyncTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).SyncTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_SyncTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).SyncTable(ctx, req.(*SyncTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_CreateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).CreateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_CreateColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).CreateColumn(ctx, req.(*CreateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_UpdateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).UpdateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_UpdateColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).UpdateColumn(ctx, req.(*UpdateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_GetColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).GetColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_GetColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).GetColumn(ctx, req.(*GetColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_DeleteColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).DeleteColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_DeleteColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).DeleteColumn(ctx, req.(*DeleteColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_ListColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).ListColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_ListColumns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).ListColumns(ctx, req.(*ListColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_BatchCreateColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).BatchCreateColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_BatchCreateColumns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).BatchCreateColumns(ctx, req.(*BatchCreateColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_BatchUpdateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).BatchUpdateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_BatchUpdateColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).BatchUpdateColumn(ctx, req.(*BatchUpdateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_BatchDeleteColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).BatchDeleteColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_BatchDeleteColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).BatchDeleteColumn(ctx, req.(*BatchDeleteColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_CreateRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).CreateRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_CreateRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).CreateRow(ctx, req.(*CreateRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_UpdateRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).UpdateRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_UpdateRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).UpdateRow(ctx, req.(*UpdateRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_GetRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).GetRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_GetRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).GetRow(ctx, req.(*GetRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_DeleteRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).DeleteRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_DeleteRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).DeleteRow(ctx, req.(*DeleteRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_ListRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).ListRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_ListRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).ListRow(ctx, req.(*ListRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_ExportRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).ExportRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_ExportRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).ExportRow(ctx, req.(*ExportRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_BatchCreateRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).BatchCreateRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_BatchCreateRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).BatchCreateRows(ctx, req.(*BatchCreateRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_BatchUpdateRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).BatchUpdateRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_BatchUpdateRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).BatchUpdateRows(ctx, req.(*BatchUpdateRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitable_BatchDeleteRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitableServer).BatchDeleteRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unitable_BatchDeleteRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitableServer).BatchDeleteRows(ctx, req.(*BatchDeleteRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Unitable_ServiceDesc is the grpc.ServiceDesc for Unitable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Unitable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "armory.unitable.v1.Unitable",
	HandlerType: (*UnitableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_table",
			Handler:    _Unitable_CreateTable_Handler,
		},
		{
			MethodName: "update_table",
			Handler:    _Unitable_UpdateTable_Handler,
		},
		{
			MethodName: "get_table",
			Handler:    _Unitable_GetTable_Handler,
		},
		{
			MethodName: "list_tables",
			Handler:    _Unitable_ListTables_Handler,
		},
		{
			MethodName: "delete_table",
			Handler:    _Unitable_DeleteTable_Handler,
		},
		{
			MethodName: "sync_table",
			Handler:    _Unitable_SyncTable_Handler,
		},
		{
			MethodName: "create_column",
			Handler:    _Unitable_CreateColumn_Handler,
		},
		{
			MethodName: "update_column",
			Handler:    _Unitable_UpdateColumn_Handler,
		},
		{
			MethodName: "get_column",
			Handler:    _Unitable_GetColumn_Handler,
		},
		{
			MethodName: "delete_column",
			Handler:    _Unitable_DeleteColumn_Handler,
		},
		{
			MethodName: "list_columns",
			Handler:    _Unitable_ListColumns_Handler,
		},
		{
			MethodName: "batch_create_columns",
			Handler:    _Unitable_BatchCreateColumns_Handler,
		},
		{
			MethodName: "batch_update_column",
			Handler:    _Unitable_BatchUpdateColumn_Handler,
		},
		{
			MethodName: "batch_delete_column",
			Handler:    _Unitable_BatchDeleteColumn_Handler,
		},
		{
			MethodName: "create_row",
			Handler:    _Unitable_CreateRow_Handler,
		},
		{
			MethodName: "update_row",
			Handler:    _Unitable_UpdateRow_Handler,
		},
		{
			MethodName: "get_row",
			Handler:    _Unitable_GetRow_Handler,
		},
		{
			MethodName: "delete_row",
			Handler:    _Unitable_DeleteRow_Handler,
		},
		{
			MethodName: "list_row",
			Handler:    _Unitable_ListRow_Handler,
		},
		{
			MethodName: "export_row",
			Handler:    _Unitable_ExportRow_Handler,
		},
		{
			MethodName: "batch_create_rows",
			Handler:    _Unitable_BatchCreateRows_Handler,
		},
		{
			MethodName: "batch_update_rows",
			Handler:    _Unitable_BatchUpdateRows_Handler,
		},
		{
			MethodName: "batch_delete_rows",
			Handler:    _Unitable_BatchDeleteRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "armory/unitable/v1/unitable.proto",
}
