// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.

package unitable

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

func init() {
	core.RegisterJSONTypeDecoder("unitable.ListRowResponse", &ListRowResponseCodec{})
	core.RegisterJSONTypeEncoder("unitable.ListRowResponse", &ListRowResponseCodec{})
}

type ListRowResponseCodec struct {
}

func (codec *ListRowResponseCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	any := iter.ReadAny()
	listRowResponse := (*ListRowResponse)(ptr)
	if any.ValueType() == jsoniter.ArrayValue {
		any.ToVal(&listRowResponse.Objects)
	}
}

func (codec *ListRowResponseCodec) IsEmpty(ptr unsafe.Pointer) bool {
	listRowResponse := (*ListRowResponse)(ptr)
	return listRowResponse == nil || len(listRowResponse.Objects) == 0
}

func (codec *ListRowResponseCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	listRowResponse := (*ListRowResponse)(ptr)
	if len(listRowResponse.Objects) > 0 {
		stream.WriteVal(listRowResponse.Objects)
	}
}
