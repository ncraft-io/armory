// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.

package unitable

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

func init() {
	core.RegisterJSONTypeDecoder("unitable.ListColumnsResponse", &ListColumnsResponseCodec{})
	core.RegisterJSONTypeEncoder("unitable.ListColumnsResponse", &ListColumnsResponseCodec{})
}

type ListColumnsResponseCodec struct {
}

func (codec *ListColumnsResponseCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	any := iter.ReadAny()
	listColumnsResponse := (*ListColumnsResponse)(ptr)
	if any.ValueType() == jsoniter.ArrayValue {
		any.ToVal(&listColumnsResponse.Columns)
	}
}

func (codec *ListColumnsResponseCodec) IsEmpty(ptr unsafe.Pointer) bool {
	listColumnsResponse := (*ListColumnsResponse)(ptr)
	return listColumnsResponse == nil || len(listColumnsResponse.Columns) == 0
}

func (codec *ListColumnsResponseCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	listColumnsResponse := (*ListColumnsResponse)(ptr)
	if len(listColumnsResponse.Columns) > 0 {
		stream.WriteVal(listColumnsResponse.Columns)
	} else {
		stream.WriteRaw("[]")
	}
}
